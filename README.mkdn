# NAME

Return::Object - on-the-fly generation of results objects

# VERSION

version 0.01

# SYNOPSIS

    use Return::Object;

    sub foo {
      return_object { a => 1 };
    }

    $result = foo();
    print $result->a;  # prints
    print $result->b;  # throws

    # create two constructors, <cloned> and <copied> with different
    # behaviors. does not import C<return_object>
    use Return::Object
      { -as => 'cloned', clone => 1},
      { -as => 'copied', copy => 1 };

# DESCRIPTION

This module provides routines which encapsulate a hash as an object.
The object provides methods for keys in the hash; attempting to access
a non-existent key via a method will cause an exception.

The impetus for this was to encapsulate data returned from a
subroutine or method (hence the name).  Returning a bare hash can lead
to bugs if there are typos in hash key names when accessing the hash.

It is not necessary for the hash to be fully populated when the object
is created.  The underlying hash may be manipulated directly, and
changes will be reflected in the object's methods.  To prevent this,
consider using the lock routines in [Hash::Util](https://metacpan.org/pod/Hash::Util) on the object after
creation.

The object's methods act as both accessors and setters, e.g.

    $obj = return_object( { a => 1 } );
    print $obj->a; # 1
    $obj->a( 3 );
    print $obj->a; # 3

Only hash keys which are legal method names will be accessible via
object methods.

## Object construction and constructor customization

By default `Object::Return` exports a `return_object` constructor
which, given a hashref, blesses it directly into the
**Return::Object::Class** class.

The constructor may be customized to change which class the object is
instantiated from, and how it is constructed from the data.
For example,

    use Return::Object
      { -as => 'return_cloned_object', -clone => 1 };

will create a constructor> which clones the passed hash
and is imported as `return_cloned_object`.  To import it under
the original name, `return_object`, leave out the `-as` option.

The following options are available to customize the constructor.

- `-as` => _subroutine name_

    This is optional, and imports the constructor with the given name. If
    not specified, it defaults to `return_object`.

- `-class` => _class name_

    The object will be blessed into the specified class.  If the class
    should be created on the fly, specify the `-create` option.
    See ["Object Classes"](#object-classes) for what is expected of the object classes.
    This defaults to `Object::Return::Class`.

- `-create` => _boolean_

    If true, and `-class` is specified, a class with the given name
    will be created.

- `-copy` => _boolean_

    If true, the object will store the data in a _shallow_ copy of the
    hash. By default, the object uses the hash directly.

- `-clone` => _boolean_ | _coderef_

    Store the data in a deep copy of the hash. if _true_, ["dclone" in Storable](https://metacpan.org/pod/Storable#dclone)
    is used. If a coderef, it will be called as

        $clone = coderef->( $hash )

    By default, the object uses the hash directly.

## Object Classes

An object class has the following properties:

- The class must be a subclass of `Return::Object::Base`.
- The class typically does not provide any methods, as they would mask
a hash key of the same name.
- The class need not have a constructor.  If it does, it is passed a
hashref which it should bless as the actual object.  For example:

        package My::Result;
        use parent 'Return::Object::Base';

        sub new {
          my  ( $class, $hash ) = @_;
          return bless $hash, $class;
        }

    This excludes having a hash key named `new`.

`Return::Object::Base` provides an empty `DESTROY` method, a
`can` method, and an `AUTOLOAD` method.  They will mask hash
keys with the same names.

# SEE ALSO

Here's a compaison of this module and others on CPAN.

- [Return::Object](https://metacpan.org/pod/Return::Object) (this module)
    - Light dependency chain.
    - only applies object paradigm to top level hash
    - accessing a non-existing element via an accessor throws
    - can use custom package
    - can copy/clone existing hash. clone is customizable
- [Object::Result](https://metacpan.org/pod/Object::Result)

    As you might expect from a
    [DCONWAY](https://metacpan.org/author/DCONWAY) module, this does just
    about everything you'd like.  It has a very heavy set of dependencies.

- [Hash::AsObject](https://metacpan.org/pod/Hash::AsObject)
    - no out-of-core dependencies
    - applies object paradigm recursively
    - accessing a non-existing element via an accessor creates it
- [Data::AsObject](https://metacpan.org/pod/Data::AsObject)
    - moderate dependency chain (no XS?)
    - applies object paradigm recursively
    - accessing a non-existing element throws
- [Class::Hash](https://metacpan.org/pod/Class::Hash)
    - no out-of-core dependencies
    - only applies object paradigm to top level hash
    - can add generic accessor, mutator, and element management methods
    - accessing a non-existing element via an accessor creates it (not documented, but code implies it)
    - `can()` doesn't work
- [Hash::Inflator](https://metacpan.org/pod/Hash::Inflator)
    - accessing a non-existing element via an accessor returns undef
    - applies object paradigm recursively
- [Hash::AutoHash](https://metacpan.org/pod/Hash::AutoHash)
    - moderate dependency chain.  Requires XS, tied hashes
    - applies object paradigm recursively
    - accessing a non-existing element via an accessor creates it
- [Hash::Objectify](https://metacpan.org/pod/Hash::Objectify)
    - only applies object paradigm to top level hash
    - light dependency chain.  Requires XS.
    - accessing a non-existing element throws, but if an existing
    element is accessed, then deleted, accessor returns undef rather than
    throwing
    - can use custom package

# BUGS AND LIMITATIONS

You can make new bug reports, and view existing ones, through the
web interface at [https://rt.cpan.org/Public/Dist/Display.html?Name=Return-Object](https://rt.cpan.org/Public/Dist/Display.html?Name=Return-Object).

# AUTHOR

Diab Jerius <djerius@cpan.org>

# COPYRIGHT AND LICENSE

This software is Copyright (c) 2017 by Smithsonian Astrophysical Observatory.

This is free software, licensed under:

    The GNU General Public License, Version 3, June 2007
